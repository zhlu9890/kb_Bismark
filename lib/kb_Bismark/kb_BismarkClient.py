# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_Bismark(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def genome_preparation(self, params, context=None):
        """
        :param params: instance of type "preparationParams" -> structure:
           parameter "assembly_or_genome_ref" of String, parameter
           "output_dir" of String, parameter "ws_for_cache" of String
        :returns: instance of type "preparationResult" -> structure:
           parameter "output_dir" of String, parameter "from_cache" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "pushed_to_cache" of type "boolean" (A boolean - 0 for
           false, 1 for true. @range (0, 1))
        """
        return self._client.call_method(
            'kb_Bismark.genome_preparation',
            [params], self._service_ver, context)

    def bismark(self, params, context=None):
        """
        :param params: instance of type "bismarkParams" -> structure:
           parameter "input_ref" of String, parameter
           "assembly_or_genome_ref" of String, parameter "lib_type" of
           String, parameter "mismatch" of Long, parameter "length" of Long,
           parameter "qual" of String, parameter "minins" of Long, parameter
           "maxins" of Long
        :returns: instance of type "bismarkResult" -> structure: parameter
           "alignment_ref" of String
        """
        return self._client.call_method(
            'kb_Bismark.bismark',
            [params], self._service_ver, context)

    def methylation_extractor(self, params, context=None):
        """
        :param params: instance of type "extractorParams" -> structure:
           parameter "alignment_ref" of String
        :returns: instance of type "extractorResult" -> structure: parameter
           "report_ref" of String
        """
        return self._client.call_method(
            'kb_Bismark.methylation_extractor',
            [params], self._service_ver, context)

    def bismark_app(self, params, context=None):
        """
        :param params: instance of type "bismarkAppParams" -> structure:
           parameter "input_ref" of String, parameter
           "assembly_or_genome_ref" of String, parameter "output_workspace"
           of String, parameter "lib_type" of String, parameter "mismatch" of
           Long, parameter "length" of Long, parameter "qual" of String,
           parameter "minins" of Long, parameter "maxins" of Long
        :returns: instance of type "bismarkAppResult" -> structure: parameter
           "alignment_ref" of String, parameter "report_name" of String,
           parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_Bismark.bismark_app',
            [params], self._service_ver, context)

    def run_bismark_cli(self, params, context=None):
        """
        :param params: instance of type "RunBismarkCLIParams" -> structure:
           parameter "command_name" of String, parameter "options" of list of
           String
        """
        return self._client.call_method(
            'kb_Bismark.run_bismark_cli',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_Bismark.status',
                                        [], self._service_ver, context)
